const readline = require('readline');

const interface = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

const adminfunctions = require('../models/AdminFunctions')
// const databasestore = require('../models/DatabaseStore')

const chalk = require('chalk')


/****THERE ARE NO AUTOMATED TESTS FOR THIS FILE -- TESTED MANUALLY */

selectOperation()


function selectOperation() {
  interface.question(
    chalk.bold("Please select option: \n1. Add Admin User\n2. List Admin Users\n3. Configure CLA requirement for a project\n4. Get CLARequirement for project\n5. Whitelist user\n6. Remove user from whitelist\n7. Get Whitelist\n8. Remove signed CLA\n9. Get List of CLAs for User\n10. Quit\n"),
    (option) => {
      switch (option) {
      case "1":
        setAdminStatus()
        break;
      case "2":
        getAdminUsers()
        break;
      case "3":
        addCLARequirement()
        break;
      case "4":
        getCLARequirement()
        break
      case "5":
        whitelistUser()
        break;
      case "6":
        removeFromWhitelist()
        break;
      case "7":
        getWhitelist()
        break;
      case "8":
        removesignedCLA()
        break;
      case "9":
        getListofCLAs()
        break;
      case "10":
        interface.close()
        process.exit()
        break;
      default:
        console.log(chalk.red.bold("invalid option, please choose again"))
        selectOperation()
      }
    }
  )
}

function setAdminStatus() {
  interface.question(chalk.blue("enter githubusername true or githubusername false to set admin status on user\n"),
    (answer) => {
      //create a dummy promise that resolves immediately to undefined...allows you to put all the
      //following synchronous code inside a .then()....makes catching errors from JSON.parse easy to catch
      //these will now propogate to the .catch() block and not need to be handled with a seperate try..catch
      // handling errors from within a callback outside of that callback is not possible so wrapping a call to setAdminStatus()
      //inside a try..catch won't catch the errors generated by JSON.parse
      var promise = Promise.resolve()
      return promise
        .then(function () {
          let inputs = answer.split(" ")
          let parsedFlag

          parsedFlag = JSON.parse(inputs[1])

          return adminfunctions.setAdminStatusAsync(inputs[0], parsedFlag)
        })
        .then(function () {
          console.log(chalk.green("success"))
          selectOperation()
        })
        .catch(function (e) { //catch any errors generated in the promise chain...print error and return to menu
          console.log(chalk.red.bold("An error occured, please try again\n"))
          console.log(chalk.dim(e))
          selectOperation()
        })
    })
}

function getAdminUsers() {
  return adminfunctions.getAdminUserNamesAsync()
    .then(function (arrayOfAdminUsernames) {
      for (let i = 0; i < arrayOfAdminUsernames.length; i++) {
        console.log(chalk.green(arrayOfAdminUsernames[i] + " "))
      }
      selectOperation()
    })
    .catch(function (e) {
      console.log(chalk.red.bold("An error occured, please try again\n"))
      console.log(chalk.dim(e))
      selectOperation()
    })
}

function addCLARequirement() {
  interface.question(chalk.blue("enter 'full name of github project' 'name of cla' if a cla is already specificied for this project it will be overwritten\n"),
    (answer) => {
      let inputs = answer.split(" ");
      return adminfunctions.addCLARequirementAsync(inputs[0], inputs[1])
        .then(function () {
          console.log(chalk.green("success"))
          selectOperation();
        })
        .catch(function (e) {
          console.log(chalk.red.bold("An error occured, please try again\n"))
          console.log(chalk.dim(e))
          selectOperation()
        })
    })
}

function getCLARequirement() {
  interface.question(chalk.blue("please enter the full name of the github project\n"),
    (answer) => {
      return adminfunctions.retrieveCLARequirementAsync(answer)
        .then(function (response) {
          console.log(chalk.green(response))
          selectOperation()
        })
        .catch(function (e) {
          console.log(chalk.red.bold("An error occured, please try again\n"))
          console.log(chalk.dim(e))
          selectOperation()
        })
    })
}

function whitelistUser() {
  interface.question(chalk.blue("please enter 'full github username' 'full github reponame'\n"),
    (answer) => {
      let inputs = answer.split(" ")
      return adminfunctions.whitelistUserAsync(inputs[0], inputs[1])
        .then(function () {
          console.log(chalk.green("success"))
          selectOperation()
        })
        .catch(function (e) {
          console.log(chalk.red.bold("An error occured, please try again\n"))
          console.log(chalk.dim(e))
          selectOperation()
        })
    })
}

function removeFromWhitelist() {
  interface.question(chalk.blue("please enter 'full github username' 'full github reponame'\n"),
    (answer) => {
      let inputs = answer.split(" ")
      return adminfunctions.removeFromWhitelistAsync(inputs[0], inputs[1])
        .then(function () {
          console.log(chalk.green("success"))
          selectOperation()
        })
        .catch(function (e) {
          console.log(chalk.red.bold("An error occured, please try again\n"))
          console.log(chalk.dim(e))
          selectOperation()
        })
    })
}

function getWhitelist() {
  interface.question(chalk.blue("please enter 'full github reponame'\n"),
    (answer) => {
      return adminfunctions.getWhiteListAsync(answer)
        .then(function (whitelistUsernames) {
          for (let i = 0; i < whitelistUsernames.length; i++) {
            console.log(chalk.green(whitelistUsernames[i] + " "))
          }
          selectOperation()
        })
        .catch(function (e) {
          console.log(chalk.red.bold("An error occured, please try again\n"))
          console.log(chalk.dim(e))
          selectOperation()
        })
    })
}

function removesignedCLA() {
  console.log(chalk.red("Be careful with this function it will not update pull request status for pull requests already submitted"))
  interface.question(chalk.blue("please enter 'full github username' 'claname'\n"),
    (answer) => {
      let inputs = answer.split(" ")
      return adminfunctions.removeSignedCLAAsync(inputs[0], inputs[1])
        .then(function () {
          console.log(chalk.green("success"))
          selectOperation()
        })
        .catch(function (e) {
          console.log(chalk.bold.red("An error occured, please try again\n"))
          console.log(chalk.dim(e))
          selectOperation()
        })
    })
}

function getListofCLAs() {
  interface.question(chalk.blue("please enter 'full github username'\n"),
    (answer) => {
      return adminfunctions.getListofCLAsAsync(answer)
        .then(function (listOfCLAs) {
          for (let i = 0; i < listOfCLAs.length; i++) {
            console.log(chalk.green(listOfCLAs[i]))
          }
          selectOperation()
        })
        .catch(function (e) {
          console.log(chalk.red.bold("An error occured, please try again\n"))
          console.log(chalk.dim(e))
          selectOperation()
        })
    })
}
